// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: builds/v1/builds.proto

package buildsv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	BuildService_AddBuild_FullMethodName   = "/builds.v1.BuildService/AddBuild"
	BuildService_ListBuilds_FullMethodName = "/builds.v1.BuildService/ListBuilds"
)

// BuildServiceClient is the client API for BuildService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BuildServiceClient interface {
	AddBuild(ctx context.Context, in *AddBuildRequest, opts ...grpc.CallOption) (*AddBuildResponse, error)
	ListBuilds(ctx context.Context, in *ListBuildsRequest, opts ...grpc.CallOption) (BuildService_ListBuildsClient, error)
}

type buildServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewBuildServiceClient(cc grpc.ClientConnInterface) BuildServiceClient {
	return &buildServiceClient{cc}
}

func (c *buildServiceClient) AddBuild(ctx context.Context, in *AddBuildRequest, opts ...grpc.CallOption) (*AddBuildResponse, error) {
	out := new(AddBuildResponse)
	err := c.cc.Invoke(ctx, BuildService_AddBuild_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *buildServiceClient) ListBuilds(ctx context.Context, in *ListBuildsRequest, opts ...grpc.CallOption) (BuildService_ListBuildsClient, error) {
	stream, err := c.cc.NewStream(ctx, &BuildService_ServiceDesc.Streams[0], BuildService_ListBuilds_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &buildServiceListBuildsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type BuildService_ListBuildsClient interface {
	Recv() (*ListBuildsResponse, error)
	grpc.ClientStream
}

type buildServiceListBuildsClient struct {
	grpc.ClientStream
}

func (x *buildServiceListBuildsClient) Recv() (*ListBuildsResponse, error) {
	m := new(ListBuildsResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// BuildServiceServer is the server API for BuildService service.
// All implementations should embed UnimplementedBuildServiceServer
// for forward compatibility
type BuildServiceServer interface {
	AddBuild(context.Context, *AddBuildRequest) (*AddBuildResponse, error)
	ListBuilds(*ListBuildsRequest, BuildService_ListBuildsServer) error
}

// UnimplementedBuildServiceServer should be embedded to have forward compatible implementations.
type UnimplementedBuildServiceServer struct {
}

func (UnimplementedBuildServiceServer) AddBuild(context.Context, *AddBuildRequest) (*AddBuildResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddBuild not implemented")
}
func (UnimplementedBuildServiceServer) ListBuilds(*ListBuildsRequest, BuildService_ListBuildsServer) error {
	return status.Errorf(codes.Unimplemented, "method ListBuilds not implemented")
}

// UnsafeBuildServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BuildServiceServer will
// result in compilation errors.
type UnsafeBuildServiceServer interface {
	mustEmbedUnimplementedBuildServiceServer()
}

func RegisterBuildServiceServer(s grpc.ServiceRegistrar, srv BuildServiceServer) {
	s.RegisterService(&BuildService_ServiceDesc, srv)
}

func _BuildService_AddBuild_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddBuildRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BuildServiceServer).AddBuild(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BuildService_AddBuild_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BuildServiceServer).AddBuild(ctx, req.(*AddBuildRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BuildService_ListBuilds_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ListBuildsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(BuildServiceServer).ListBuilds(m, &buildServiceListBuildsServer{stream})
}

type BuildService_ListBuildsServer interface {
	Send(*ListBuildsResponse) error
	grpc.ServerStream
}

type buildServiceListBuildsServer struct {
	grpc.ServerStream
}

func (x *buildServiceListBuildsServer) Send(m *ListBuildsResponse) error {
	return x.ServerStream.SendMsg(m)
}

// BuildService_ServiceDesc is the grpc.ServiceDesc for BuildService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var BuildService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "builds.v1.BuildService",
	HandlerType: (*BuildServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddBuild",
			Handler:    _BuildService_AddBuild_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ListBuilds",
			Handler:       _BuildService_ListBuilds_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "builds/v1/builds.proto",
}
